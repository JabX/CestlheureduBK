@page "/snacks"
@using CestlheureduBK.Model
@using System.Net
@using Microsoft.EntityFrameworkCore
@inject BKDbContext context;
@rendermode InteractiveServer

<PageTitle>C'est l'heure du BK ! - Rentabilité des snacks</PageTitle>

<h1>Rentabilité des snacks</h1>

@if (snacks == null || restaurant == null || update == null)
{
    <p><em>Chargement...</em></p>
}
else
{
    <p>
        Restaurant : <strong>@restaurant.Name</strong> (@restaurant.Departement)<br />
        <em style="font-size:0.8em">Dernières mises à jour : catalogue le @ToLocalTime(update.Catalogue) et offres le @ToLocalTime(update.Offers)</em>
    </p>
    @foreach (var snack in snacks)
    {
        <h5>@snack.Name</h5>
        <table class="table">
            <thead>
                <tr style="white-space:nowrap">
                    <th>Produit</th>
                    <th class="toggle" @onclick="@(() => ToggleSort("amount"))">@(sortBy == "amount" ? asc ? "⬆️" : "⬇️" : "") <span>Nombre</span></th>
                    <th class="toggle" @onclick="@(() => ToggleSort("price"))">@(sortBy == "price" ? asc ? "⬆️" : "⬇️" : "") <span>Prix</span></th>
                    <th class="toggle" @onclick="@(() => ToggleSort("value"))">@(sortBy == "value" ? asc ? "⬆️" : "⬇️" : "") <span>Pièce</span></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in snack.Products.DistinctBy(p => p.Name))
                {
                    <tr style="vertical-align:middle">
                        <td>
                            <span style="display:inline-flex;flex-wrap:wrap;align-items:center;gap:6px;">
                                <img src="@product.Image" width="100" />
                                <span style="display:inline-flex;flex-direction:column">
                                    <span>@product.Name</span>
                                </span>
                            </span>
                        </td>
                        <td>@product.Amount</td>
                        <td>
                            <span style="display:inline-flex;flex-direction:column;align-items:flex-start">
                                <span style="white-space:nowrap">@product.Price.ToString("0.00 €")</span>
                                @if (product.Ratio < 1)
                                {
                                    <span style="font-size:0.7em;font-style:italic">(compté @((product.Price * product.Ratio).ToString("0.00 €")))</span>
                                }
                            </span>
                        </td>
                        <td style="white-space:nowrap">@product.Value.ToString("0.00 €")</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private SnackDisplay[]? snacks;
    private RestaurantDb? restaurant;
    private UpdateDb? update;

    private string sortBy = "value";
    private bool asc = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadSnacks();
        restaurant = await context.Products.Include(r => r.Restaurant).Take(1).Select(r => r.Restaurant).SingleAsync();
        update = await context.Updates.SingleAsync();
    }

    private async Task ToggleSort(string field)
    {
        asc = !asc;
        sortBy = field;
        await LoadSnacks();
    }

    private async Task LoadSnacks()
    {
        snacks = await context.Products.Where(p => p.Snacks.Any(s => s.Snack.Available))
            .AsAsyncEnumerable()
            .SelectMany(p => p.Snacks.Select(s => new { SnackName = s.Snack.Name, s.Amount, ProductName = p.Name, Image = p.Image, p.Price, Ratio = Convert.ToDecimal(s.Amount) / p.Snacks.Sum(y => y.Amount) }).ToAsyncEnumerable())
            .GroupBy(s => s.SnackName)
            .SelectAwait(async s =>
            {
                var products = s.Select(t => new SnackProductDisplay(t.ProductName, t.Image, t.Amount, t.Price, t.Ratio));
                return new SnackDisplay(
                    s.Key,
                    await ((sortBy, asc) switch
                    {
                        ("amount", false) => products.OrderByDescending(off => off.Amount).ThenByDescending(off => off.Price),
                        ("amount", true) => products.OrderBy(off => off.Amount).ThenBy(off => off.Price),
                        ("price", false) => products.OrderByDescending(off => off.Price).ThenBy(off => off.Value),
                        ("price", true) => products.OrderBy(off => off.Price).ThenBy(off => off.Value),
                        ("value", false) => products.OrderByDescending(off => off.Value).ThenBy(off => off.Amount),
                        ("value", true) => products.OrderBy(off => off.Value).ThenBy(off => off.Amount),
                        _ => throw new InvalidOperationException()
                    }).ToArrayAsync());
            })
         .ToArrayAsync();
    }

    private string ToLocalTime(DateTime? date)
    {
        if (date == null)
        {
            return string.Empty;
        }

        return TimeZoneInfo.ConvertTimeFromUtc(date.Value, TimeZoneInfo.FindSystemTimeZoneById("Europe/Paris"))
            .ToString("dd/MM/yyyy à HH:mm");
    }

    private record SnackDisplay(string Name, SnackProductDisplay[] Products);

    private record SnackProductDisplay(string Name, string? Image, int Amount, decimal Price, decimal Ratio)
    {
        public decimal Value => Price * Ratio / Amount;
    }
}
