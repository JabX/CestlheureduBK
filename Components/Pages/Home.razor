@page "/"
@using CestlheureduBK.Model
@using System.Net
@using Microsoft.EntityFrameworkCore
@inject BKDbContext context;
@rendermode InteractiveServer

<PageTitle>C'est l'heure du BK ! - Rentabilité des couronnes</PageTitle>

<h1>Rentabilité des couronnes</h1>

@if (offers == null || restaurant == null || update == null)
{
    <p><em>Chargement...</em></p>
}
else
{
    <p>
        Restaurant : <strong>@restaurant.Name</strong> (@restaurant.Departement)<br />
        <em style="font-size:0.8em">Dernières mises à jour : catalogue le @ToLocalTime(update.Catalogue) et offres le @ToLocalTime(update.Offers)</em>
    </p>
    <h5 class="toggle" @onclick="() => filter = !filter">@(filter ? "⬆️" : "⬇️") <span>Filtres</span></h5>
    @if (filter)
    {
        <div class="filters">
            <label style="font-style:italic" for="name">Nom</label>
            <input id="name" type="search" @oninput="OnNameChange" />
            <br />
            <span style="font-style:italic">Couronnes</span>
            <span style="display:inline-flex;flex-wrap:wrap;row-gap:6px;column-gap:12px;align-items:center;margin-top:6px">
                <span>
                    <input type="checkbox" id="points-all" checked="@(points == null || points.Count == allPoints.Count)" @oninput="args => OnPointsChange(0, (bool)args.Value!)" />
                    <label for="points-all">Tout</label>
                </span>
                @foreach (var point in allPoints)
                {
                    <span>
                        <input type="checkbox" id="points-@point" checked="@(points == null || points.Contains(point))" @oninput="args => OnPointsChange(point, (bool)args.Value!)" />
                        <label for="points-@point">@point</label>
                    </span>
                }
            </span>
            <br />
            <span style="font-style:italic">Catégories</span>
            <span style="display:inline-flex;flex-wrap:wrap;row-gap:6px;column-gap:12px;align-items:center;margin-top:6px">
                <span>
                    <input type="checkbox" id="categories-all" checked="@(categories == null || categories.Count == allCategories.Count)" @oninput="args => OnCategorieChange(null, (bool)args.Value!)" />
                    <label for="categories-all">Tout</label>
                </span>
                @foreach (var categorie in allCategories)
                {
                    <span>
                        <input type="checkbox" id="categories-@categorie.Id" checked="@(categories == null || categories.Contains(categorie))" @oninput="args => OnCategorieChange(categorie, (bool)args.Value!)" />
                        <label for="categories-@categorie.Id">@categorie.Name</label>
                    </span>
                }
            </span>
        </div>
    }
    <h5 style="margin-top:12px">@offers.Length offres</h5>
    <table class="table">
        <thead>
            <tr style="white-space:nowrap">
                <th class="toggle" @onclick="@(() => ToggleSort("name"))">@(sortBy == "name" ? asc ? "⬆️" : "⬇️" : "") <span>Produit</span> 👑</th>
                <th class="toggle" @onclick="@(() => ToggleSort("price"))">@(sortBy == "price" ? asc ? "⬆️" : "⬇️" : "") <span>Prix</span> €</th>
                <th class="toggle" @onclick="@(() => ToggleSort("points"))">@(sortBy == "points" ? asc ? "⬆️" : "⬇️" : "") <span>Prix</span> 👑</th>
                <th class="toggle" @onclick="@(() => ToggleSort("value"))">@(sortBy == "value" ? asc ? "⬆️" : "⬇️" : "") <span>Valeur</span> 👑</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var offer in offers)
            {
                <tr style="vertical-align:middle">
                    <td>
                        <span style="display:inline-flex;flex-wrap:wrap;align-items:center;gap:6px;">
                            <img src="@offer.Image" width="100" />
                            <span style="display:inline-flex;flex-direction:column">
                                <span>@(offer.Type == "Menu" ? "Menu " : "")@offer.Name</span>
                                <span style="font-size:0.8em;display:inline-flex;column-gap:6px;flex-wrap:wrap">
                                    @foreach (var categorie in offer.Categories ?? [])
                                    {
                                        <span style="@(categorie.SubCategory ? "font-style:italic" : "font-weight:600")">@categorie.Name</span>
                                    }
                                </span>
                            </span>
                        </span>
                    </td>
                    <td style="white-space:nowrap">
                        <span style="display:inline-flex;flex-direction:column;align-items:flex-start">
                            <span>@offer.Price.ToString("0.00 €")</span>
                            @if (offer.Count > 1)
                            {
                                <span style="font-size:0.7em;font-style:italic">(@((offer.Price / offer.Count).ToString("0.00 €")) / u)</span>
                            }
                        </span>
                    </td>
                    <td style="white-space:nowrap">
                        <span style="display:inline-flex;flex-direction:column;align-items:flex-start">
                            <span>@offer.Points</span>
                            @if (offer.Count > 1)
                            {
                                <span style="font-size:0.7em;font-style:italic">(@(decimal.Round(Convert.ToDecimal(offer.Points) / offer.Count, 2)) / u)</span>
                            }
                        </span>
                    </td>
                    <td style="white-space:nowrap">@offer.Value.ToString("0.000 €")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private OfferDisplay[]? offers;
    private RestaurantDb? restaurant;
    private UpdateDb? update;

    private string sortBy = "value";
    private bool asc;

    private bool filter;

    private Debouncer debouncer = new();
    private string name = "";

    private List<int> allPoints = [];
    private List<int>? points;

    private List<CategorieDb> allCategories = [];
    private List<CategorieDb>? categories;

    protected override async Task OnInitializedAsync()
    {
        await LoadOffers();
        restaurant = await context.Products.Include(r => r.Restaurant).Take(1).Select(r => r.Restaurant).SingleAsync();
        update = await context.Updates.SingleAsync();

        allPoints = offers!.Select(o => o.Points).Distinct().OrderBy(a => a).ToList();
        allCategories = offers!.SelectMany(o => o.Categories).DistinctBy(a => a.Id).Where(a => !a.SubCategory).OrderBy(a => a.Name).ToList();
    }

    private async Task ToggleSort(string field)
    {
        if (field != sortBy)
        {
            asc = field != "value";
        }
        else
        {
            asc = !asc;
        }

        sortBy = field;
        await LoadOffers();
    }

    private async Task OnNameChange(ChangeEventArgs args)
    {
        name = args.Value != null ? (string)args.Value : "";
        await debouncer.DebounceAsync(300, (ct) => LoadOffers());
    }

    private async Task OnPointsChange(int point, bool value)
    {
        if (point == 0)
        {
            if (value)
            {
                points = null;
            }
            else
            {
                points = [];
            }
        }
        else if (points == null)
        {
            points = allPoints.Where(p => p != point).ToList();
        }
        else if (points.Contains(point))
        {
            points.Remove(point);
        }
        else
        {
            points ??= [];
            points.Add(point);
            if (points.Count == allPoints.Count)
            {
                points = null;
            }
        }

        await LoadOffers();
    }

    private async Task OnCategorieChange(CategorieDb? categorie, bool value)
    {
        if (categorie == null)
        {
            if (value)
            {
                categories = null;
            }
            else
            {
                categories = [];
            }
        }
        else if (categories == null)
        {
            categories = allCategories.Where(p => p != categorie).ToList();
        }
        else if (categories?.Contains(categorie) ?? false)
        {
            categories.Remove(categorie);
        }
        else
        {
            categories ??= [];
            categories.Add(categorie);
            if (categories.Count == allCategories.Count)
            {
                categories = null;
            }
        }

        await LoadOffers();
    }

    private async Task LoadOffers()
    {
        var query = context.Offers.Include(off => off.Promotion).ThenInclude(prm => prm.Products).ThenInclude(prd => prd.Categories).Include(off => off.Promotion).ThenInclude(prm => prm.Menus).ThenInclude(men => men.Categories)
            .Where(off => points == null || points.Contains(off.Points))
            .AsAsyncEnumerable()
            .SelectMany(off =>
                off.Promotion.Products.Where(p => p.Available).Select(prd => new OfferDisplay("Produit", prd.Name, prd.Image, off.Points, prd.Price, prd.Count, prd.Categories.OrderBy(c => c.SubCategory).ThenBy(c => c.Name).ToArray()))
                .Concat(off.Promotion.Menus.Where(p => p.Available).Select(men => new OfferDisplay("Menu", men.Name, men.Image, off.Points, men.Price, men.Count, men.Categories.OrderBy(c => c.SubCategory).ThenBy(c => c.Name).ToArray())))
                .ToAsyncEnumerable());

        if (!string.IsNullOrEmpty(name))
        {
            query = query.Where(off => off.Name.ToLower().Contains(name.ToLower()));
        }

        var catFilter = categories?.Select(c => c.Id).ToList();
        if (catFilter != null)
        {
            query = query.Where(m => m.Categories.Any(c => catFilter.Contains(c.Id)));
        }

        offers = await ((sortBy, asc) switch
        {
            ("name", false) => query.OrderByDescending(off => off.Name).ThenByDescending(off => off.Type),
            ("name", true) => query.OrderBy(off => off.Name).ThenByDescending(off => off.Type),
            ("price", false) => query.OrderByDescending(off => off.Price).ThenBy(off => off.Points),
            ("price", true) => query.OrderBy(off => off.Price).ThenBy(off => off.Points),
            ("points", false) => query.OrderByDescending(off => off.Points).ThenByDescending(off => off.Price),
            ("points", true) => query.OrderBy(off => off.Points).ThenBy(off => off.Price),
            ("value", false) => query.OrderByDescending(off => off.Value).ThenBy(off => off.Points),
            ("value", true) => query.OrderBy(off => off.Value).ThenBy(off => off.Points),
            _ => throw new InvalidOperationException()
        })
            .ToArrayAsync();
    }

    private string ToLocalTime(DateTime? date)
    {
        if (date == null)
        {
            return string.Empty;
        }

        return TimeZoneInfo.ConvertTimeFromUtc(date.Value, TimeZoneInfo.FindSystemTimeZoneById("Europe/Paris"))
            .ToString("dd/MM/yyyy à HH:mm");
    }

    private record OfferDisplay(string Type, string Name, string? Image, int Points, decimal Price, int Count, CategorieDb[] Categories)
    {
        public decimal Value => Price / Points;
    }
}
