@page "/"
@using CestlheureduBK.Model
@using System.Net
@using Microsoft.EntityFrameworkCore
@inject BKDbContext context;
@attribute [StreamRendering]

<PageTitle>C'est l'heure du BK ! - Rentabilité des couronnes</PageTitle>

<h1>Rentabilité des couronnes</h1>

@if (offers == null)
{
    <p><em>Chargement...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr style="white-space:nowrap">
                <th>Produit</th>
                <th>Prix €</th>
                <th>Prix 👑</th>
                <th>Valeur 👑</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var offer in offers)
            {
                <tr style="vertical-align:middle">
                    <td><span style="display:inline-flex;flex-wrap:wrap;align-items:center;gap:6px;"><img src="@offer.Image" width="100" /><span>@offer.Name</span></span></td>
                    <td style="white-space:nowrap">@offer.Price.ToString("0.00 €")</td>
                    <td style="white-space:nowrap">@offer.Points</td>
                    <td style="white-space:nowrap">@offer.PointValue.ToString("0.000 €")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private OfferDisplay[]? offers;

    protected override async Task OnInitializedAsync()
    {
        offers = await context.Offers.Include(off => off.Promotion).ThenInclude(prm => prm.Products).Include(off => off.Promotion).ThenInclude(prm => prm.Menus)
            .AsAsyncEnumerable()
            .SelectMany(off => 
                off.Promotion.Products.Select(prd => new OfferDisplay("Produit", prd.Name, prd.Image, off.Points, prd.Price))
                .Concat(off.Promotion.Menus.Select(men => new OfferDisplay("Menu", men.Name, men.Image, off.Points, men.Price)))
                .ToAsyncEnumerable())
            .OrderByDescending(off => off.PointValue)
            .ThenBy(off => off.Points)
            .ThenBy(off => off.Name)
            .ToArrayAsync();
    }

    private record OfferDisplay(string Type, string Name, string? Image, int Points, decimal Price)
    {
        public decimal PointValue => Price / Points;
    }
}
