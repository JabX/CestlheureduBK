@page "/data"
@using System.Net
@using CestlheureduBK.Model
@using System.Net.Http.Headers
@using Microsoft.EntityFrameworkCore
@using System.Text.RegularExpressions
@using System.Globalization
@rendermode InteractiveServer
@inject BKDbContext context;

<PageTitle>C'est l'heure du BK ! - Chargement des données</PageTitle>

<h1>Chargement des données</h1>

<br />
<button class="btn btn-primary" @onclick="ReloadRestaurants">Recharger les restaurants</button>
<br />
<br />

<label for"codeRestaurant">Restaurant</label>
<select id="codeRestaurant" @bind="@codeRestaurant">
    @foreach (var restaurant in restaurants)
    {
        <option value="@restaurant.Id">@restaurant.Departement - @restaurant.Name</option>
    }
</select>
<button class="btn btn-primary" @onclick="ReloadCatalogue">Recharger le catalogue</button>
<br />
<br />
<label for"accessToken">Access Token pour l'API BK</label>
<input id="accessToken" @bind="@accessToken" />
<button class="btn btn-primary" @onclick="ReloadOffers">Recharger les offres</button>
<br />
<br />
<button class="btn btn-primary" @onclick="ResetDb">Tout recharger</button>
<p class="@ClassName">@message</p>
@if (loading)
{
    <p>Chargement...</p>
}

@code {
    string codeRestaurant = "K0157";
    bool loading;
    string? accessToken;
    string? message;
    bool error;

    RestaurantDb[] restaurants = [];

    string ClassName => error ? "alert-danger" : "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            restaurants = await context.Restaurants
                .Where(r => r.Opened)
                .OrderBy(r => r.Departement)
                .ThenBy(r => r.Name)
                .ToArrayAsync();
        }
        catch
        {

        }
    }

    private async Task ResetDb()
    {
        try
        {
            message = null;
            loading = true;

            var client = GetClient(true);
            var result = await client.GetAsync("https://webapi.burgerking.fr/blossom/api/v13/kingdom/points");
            result.EnsureSuccessStatusCode();

            await context.Database.EnsureDeletedAsync();
            await context.Database.EnsureCreatedAsync();

            context.Updates.Add(new());
            await context.SaveChangesAsync();
            context.ChangeTracker.Clear();

            await ReloadRestaurants();
            await ReloadCatalogue();
            await ReloadOffers();

            error = false;
            message = "Base reconstruite avec succès !";
        }
        catch (Exception e)
        {
            error = true;
            message = $"Une erreur est survenue lors de la reconstruction de la base : {e.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private async Task ReloadRestaurants()
    {
        using var client = GetClient();

        try
        {
            message = null;
            loading = true;
            var storeLocator = await client.GetAsync("https://webapi.burgerking.fr/blossom/api/v13/public/store-locator");
            storeLocator.EnsureSuccessStatusCode();
            var stores = (await storeLocator.Content.ReadFromJsonAsync<StoreLocator>())!;

            var restaurantsDb = await context.Restaurants.ToDictionaryAsync(r => r.Id);

            var restaux = await stores.Markers.ToAsyncEnumerable().SelectAwait(async store =>
            {
                if (restaurantsDb.TryGetValue(store.Id, out var restaurantDb))
                {
                    return restaurantDb;
                }
                else
                {
                    var restaurant = await client.GetAsync($"https://webapi.burgerking.fr/blossom/api/v13/public/restaurant/{store.Id}");
                    restaurant.EnsureSuccessStatusCode();
                    var restaurantData = (await restaurant.Content.ReadFromJsonAsync<Restaurant>())!;
                    return new RestaurantDb
                        {
                            AddressFull = restaurantData.AddressFull,
                            Id = restaurantData.Id,
                            Name = restaurantData.Name,
                            Departement = restaurantData.AddressFull.Split(" - ").Last().Trim()[..2]
                        };
                }
            }).ToArrayAsync();

            context.AddRange(restaux.Where(r => !restaurantsDb.ContainsKey(r.Id)));
            context.UpdateRange(restaux.Where(r => restaurantsDb.ContainsKey(r.Id)));
            await context.SaveChangesAsync();
            context.ChangeTracker.Clear();

            await context.Restaurants
                .Where(r => !restaux.Select(re => re.Id).Contains(r.Id))
                .ExecuteUpdateAsync(e => e.SetProperty(r => r.Opened, false));

            await context.Updates.ExecuteUpdateAsync(u => u.SetProperty(v => v.Restaurants, DateTime.UtcNow));

            await OnInitializedAsync();

            error = false;
            message = "Restaurants rechargés avec succès !";
        }
        catch (Exception e)
        {
            error = true;
            message = $"Une erreur est survenue lors de l'actualisation des données : {e.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private async Task ReloadCatalogue()
    {
        using var client = GetClient();

        try
        {
            message = null;
            loading = true;

            var result = await client.GetAsync($"https://ecoceabkstorageprdnorth.blob.core.windows.net/catalog/pick-up.{codeRestaurant}.json");
            result.EnsureSuccessStatusCode();
            var catalogue = (await result.Content.ReadFromJsonAsync<Catalogue>())!;

            var restaurant = await context.Restaurants.AsTracking().SingleAsync(r => r.Id == codeRestaurant);

            var categories = catalogue.Categories.Select(cat => new CategorieDb { Id = cat.Id, Name = cat.Name, Image = cat.Image })
                .Concat(catalogue.SubCategories.Select(cat => new CategorieDb { Id = cat.Id, Name = cat.Name, Image = cat.Image, SubCategory = true }))
                .ToList();

            var snackRegex = new Regex(@"(.+)\((\d+)\)");
            var kingboxRegex = new Regex(@"kingbox (\d+) ([a-z ]+)([ +&]*(\d+) ([a-z ]+))?", RegexOptions.IgnoreCase);

            var products = catalogue.Products.Select(prd => new ProductDb
            {
                Id = prd.Id,
                Name = prd.Name
                    .Replace("®", "")
                    .Replace("Lousiane", "Louisiane")
                    .Replace("(6) King Nuggets", "King Nuggets (6)"),
                Image = prd.Image,
                Price = prd.Price,
                Categories = prd.Categories?.Select(c => c.Id).Concat(prd.SubCategories ?? []).Select(c => categories.Single(cat => c == cat.Id)).ToList() ?? [],
                Restaurant = restaurant
            }).ToList();
            var menus = catalogue.Menus.Select(men => new MenuDb
            {
                Id = men.Id,
                Name = men.Name
                    .Replace("®", "")
                    .Replace("Steakhouse Louisiane", "Louisiane Steakhouse")
                    .Replace("[kingdom]", "", StringComparison.InvariantCultureIgnoreCase)
                    .Replace("[kd blason]", "", StringComparison.InvariantCultureIgnoreCase)
                    .Replace("menu", "", StringComparison.InvariantCultureIgnoreCase)
                    .Trim()
                    .Trim('-')
                    .Trim(),
                Image = men.Image,
                Price = men.Price,
                PriceL = men.PriceL,
                PriceXL = men.PriceXL,
                Steps = men.Steps.Select(stp => new StepDb
                {
                    Products = products.Where(prd => stp.ProductIds.Contains(prd.Id)).ToList(),
                    ProductsL = stp.ProductLIds != null ? products.Where(prd => stp.ProductLIds.Contains(prd.Id)).ToList() : [],
                    ProductsXL = stp.ProductXLIds != null ? products.Where(prd => stp.ProductXLIds.Contains(prd.Id)).ToList() : [],
                    DefaultProduct = products.SingleOrDefault(prd => prd.Id == stp.DefaultId),
                    Type = stp.StepType
                }).ToList(),
                Categories = men.Categories?.Select(c => c.Id).Concat(men.SubCategories ?? []).Select(c => categories.Single(cat => c == cat.Id)).ToList() ?? [],
                Restaurant = restaurant
            }).ToList();

            var snacks = products
                .Where(p => snackRegex.IsMatch(p.Name))
                .Select(p => new SnackDb { Name = snackRegex.Match(p.Name).Groups[1].Value.Trim() })
                .DistinctBy(p => p.Name)
                .ToList();

            foreach (var product in products.Where(prd => prd.Image == null))
            {
                product.Image = products.FirstOrDefault(prd => prd.Name.StartsWith(product.Name, StringComparison.InvariantCultureIgnoreCase) && prd.Image != null)?.Image;
            }

            var productsDb = await context.Products.ToDictionaryAsync(p => p.Id);

            foreach (var product in products)
            {
                if (productsDb.TryGetValue(product.Id, out var productDb))
                {
                    product.Energy = productDb.Energy;
                } 
                else
                {
                    var productResult = await client.GetAsync($"https://webapi.burgerking.fr/blossom/api/v13/public/produit/{catalogue.Products.Single(prd=>prd.Id == product.Id).RouteId}");
                    if (productResult.IsSuccessStatusCode)
                    {
                        var productDetail = (await productResult.Content.ReadFromJsonAsync<ProductResult>())!;
                        var energy = productDetail.Product.Nutrition.SingleOrDefault(n => n.Item == "product.nutritional.energy")?.Portion;
                        if (!string.IsNullOrEmpty(energy))
                        {
                            product.Energy = decimal.Parse(energy, CultureInfo.InvariantCulture);
                        }
                    }
                }

                product.Categories = product.Categories.Concat(products.Where(prd => prd.Name.StartsWith(product.Name, StringComparison.InvariantCultureIgnoreCase)).SelectMany(prd => prd.Categories ?? [])).ToList();

                var match = snackRegex.Match(product.Name);
                if (match.Success)
                {
                    product.Snacks.Add(new()
                    {
                        Snack = snacks.Single(s => s.Name == match.Groups[1].Value.Trim()),
                        Amount = int.Parse(match.Groups[2].Value)
                    });
                }
                else
                {
                    var match2 = kingboxRegex.Match(product.Name);
                    if (match2.Success)
                    {
                        product.Snacks.Add(new()
                        {
                            Snack = snacks.Single(s => s.Name == match2.Groups[2].Value.Trim()),
                            Amount = int.Parse(match2.Groups[1].Value.Trim())
                        });

                        if (match2.Groups[3].Success)
                        {
                            product.Snacks.Add(new()
                            {
                                Snack = snacks.Single(s => s.Name == match2.Groups[5].Value.Trim()),
                                Amount = int.Parse(match2.Groups[4].Value.Trim())
                            });
                        }
                    }
                }
            }

            foreach (var menu in menus.Where(men => men.Image == null))
            {
                menu.Image = menus.FirstOrDefault(men => men.Name.StartsWith(menu.Name, StringComparison.InvariantCultureIgnoreCase) && men.Image != null)?.Image;
            }

            foreach (var menu in menus)
            {
                menu.Categories = menu.Categories.Concat(menus.Where(prd => prd.Name.StartsWith(menu.Name, StringComparison.InvariantCultureIgnoreCase)).SelectMany(prd => prd.Categories ?? [])).ToList();

                var match = snackRegex.Match(menu.Name);
                if (match.Success)
                {
                    var n = menu.Name;
                    menu.Snacks.Add(new()
                    {
                        Snack = snacks.Single(s => s.Name == match.Groups[1].Value.Trim()),
                        Amount = int.Parse(match.Groups[2].Value)
                    });
                }
            }

            var promotions = catalogue.Promotions.Select(prm => new PromotionDb { Id = prm.Id, Name = prm.Name, Products = products.Where(prd => prm.ProductIds.Contains(prd.Id)).ToList(), Menus = menus.Where(men => prm.MenuIds.Contains(men.Id)).ToList(), Restaurant = restaurant }).ToList();

            await context.Database.ExecuteSqlRawAsync(@"
                delete from StepProducts;
                delete from StepProductsL;
                delete from StepProductsXL;
                delete from Steps;
                delete from SnackAmounts;
                delete from CategorieDbProductDb;
                delete from CategorieDbMenuDb;
                delete from MenuDbPromotionDb;
                delete from ProductDbPromotionDb;
            ");

            var snacksDb = await context.Snacks.ToDictionaryAsync(p => p.Name);
            foreach (var snack in snacks)
            {
                snack.Id = snacksDb.TryGetValue(snack.Name, out var s) ? s.Id : 0;
            }

            var categoriesDb = await context.Categories.ToDictionaryAsync(p => p.Id);
            var menusDb = await context.Menus.ToDictionaryAsync(p => p.Id);
            var promotionsDb = await context.Promotions.ToDictionaryAsync(p => p.Id);

            context.UpdateRange(snacks);
            context.AddRange(categories.Where(r => !categoriesDb.ContainsKey(r.Id)));
            context.UpdateRange(categories.Where(r => categoriesDb.ContainsKey(r.Id)));
            context.AddRange(products.Where(r => !productsDb.ContainsKey(r.Id)));
            context.UpdateRange(products.Where(r => productsDb.ContainsKey(r.Id)));
            context.AddRange(menus.Where(r => !menusDb.ContainsKey(r.Id)));
            context.UpdateRange(menus.Where(r => menusDb.ContainsKey(r.Id)));
            context.AddRange(promotions.Where(r => !promotionsDb.ContainsKey(r.Id)));
            context.UpdateRange(promotions.Where(r => promotionsDb.ContainsKey(r.Id)));

            await context.SaveChangesAsync();
            context.ChangeTracker.Clear();


            await context.Snacks
                .Where(r => !snacks.Select(re => re.Id).Contains(r.Id))
                .ExecuteUpdateAsync(e => e.SetProperty(r => r.Available, false));
            await context.Products.IgnoreAutoIncludes()
                .Where(r => !products.Select(re => re.Id).Contains(r.Id))
                .ExecuteUpdateAsync(e => e.SetProperty(r => r.Available, false));
            await context.Menus.IgnoreAutoIncludes()
                .Where(r => !menus.Select(re => re.Id).Contains(r.Id))
                .ExecuteUpdateAsync(e => e.SetProperty(r => r.Available, false));
            await context.Promotions.IgnoreAutoIncludes()
                .Where(r => !promotions.Select(re => re.Id).Contains(r.Id))
                .ExecuteUpdateAsync(e => e.SetProperty(r => r.Available, false));

            await context.Updates.ExecuteUpdateAsync(u => u.SetProperty(v => v.Catalogue, DateTime.UtcNow));

            error = false;
            message = "Catalogue rechargé avec succès !";
        }
        catch (Exception e)
        {
            error = true;
            message = $"Une erreur est survenue lors de l'actualisation des données : {e.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private async Task ReloadOffers()
    {
        using var client = GetClient(true);

        try
        {
            message = null;
            loading = true;

            var result = await client.GetAsync("https://webapi.burgerking.fr/blossom/api/v13/kingdom/points");
            result.EnsureSuccessStatusCode();
            var points = (await result.Content.ReadFromJsonAsync<Model.Points>())!;

            var promotions = await context.Promotions.AsTracking().ToDictionaryAsync(p => p.Id);

            var offers = points.Levels.SelectMany(lvl => lvl.Offers.Select(off => new OfferDb
                {
                    Id = off.TransformationId,
                    Title = off.Title,
                    Points = off.Points,
                    Promotion = promotions[off.PromotionId]
                })).ToList();

            await context.Offers.IgnoreAutoIncludes().ExecuteDeleteAsync();
            context.AddRange(offers);
            await context.SaveChangesAsync();
            context.ChangeTracker.Clear();

            await context.Updates.ExecuteUpdateAsync(u => u.SetProperty(v => v.Offers, DateTime.UtcNow));

            error = false;
            message = "Offres rechargées avec succès !";
        }
        catch (Exception e)
        {
            error = true;
            message = $"Une erreur est survenue lors de l'actualisation des données : {e.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private HttpClient GetClient(bool withToken = false)
    {
        var client = new HttpClient(new HttpClientHandler { AutomaticDecompression = DecompressionMethods.GZip });
        client.DefaultRequestHeaders.Accept.Add(new("application/json"));

        if (withToken && !string.IsNullOrEmpty(accessToken))
        {
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
        }

        return client;
    }
}
