@page "/data"
@using System.Globalization
@using System.Net
@using System.Net.Http.Headers
@using System.Text.RegularExpressions
@using CestlheureduBK.Services
@using GeoCoordinate.NetStandard2;
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@inject BKDbContext context;
@inject UpdateDataService updateDataService;
@inject IGeolocationService geoService;

<PageTitle>C'est l'heure du BK ! - Chargement des données</PageTitle>

<RadzenStack AlignItems="AlignItems.Start">
    <h1>Chargement des données</h1>

    <RadzenButton Click="ReloadCatalogues" Disabled="loading" Text="Recharger le catalogue" />

    <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap" AlignItems="AlignItems.Center">
        <RadzenLabel Text="Access Token pour l'API BK" Component="accessToken" />
        <RadzenTextBox @bind-Value=@accessToken Name="accessToken" Style="width:303px" />
        <RadzenButton Click="ReloadOffers" Disabled="loading" Text="Recharger les offres" />
    </RadzenStack>

    <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap" AlignItems="AlignItems.Start">
        <RadzenLabel Text="Nouveau restaurant" Component="codeRestaurant" Style="line-height:40px" />
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.End">
            <RadzenDropDown @bind-Value=@newCodeRestaurant
                            Data=@MissingRestaurants
                            Name="codeRestaurant"
                            TextProperty="@nameof(RestaurantDisplay.FullName)"
                            ValueProperty="@nameof(RestaurantDisplay.Id)"
                            Style="width:350px" />
            @if (Distance != null)
            {
                <span class="distance">à @Distance km</span>
            }
        </RadzenStack>
        <RadzenButton Click="async () => { await ReloadCatalogue(newCodeRestaurant); await OnInitializedAsync(); }" Disabled="loading" Text="Ajouter" Style="margin: 2px 0" />
    </RadzenStack>

    <RadzenButton Click="ReloadRestaurants" Disabled="loading" Variant="Variant.Text" Text="Recharger les restaurants" />

    <RadzenButton Click="ResetDb" Disabled="loading" Variant="Variant.Text" Text="Tout réinitialiser" />

    @if (loading)
    {
        <RadzenProgressBarCircular Mode="ProgressBarMode.Indeterminate" ShowValue="false" />
    }

    <RadzenText class="@ClassName" Text="@message" />
</RadzenStack>



@code {
    string? newCodeRestaurant;
    GeoCoordinate? geoPosition;

    bool loading;
    string? accessToken;
    string? message;
    bool error;

    RestaurantDisplay[] restaurants = [];

    string ClassName => error ? "error" : "";

    IEnumerable<RestaurantDisplay> LoadedRestaurants => restaurants.Where(r => r.CatalogueUpdate != null);
    IEnumerable<RestaurantDisplay> MissingRestaurants => restaurants.Where(r => r.CatalogueUpdate == null);

    double? Distance
    {
        get
        {
            var restaurant = restaurants.SingleOrDefault(r => r.Id == newCodeRestaurant);
            if (restaurant != null && geoPosition != null)
            {
                return double.Round(new GeoCoordinate(restaurant.Lat, restaurant.Lng).GetDistanceTo(geoPosition) / 1000, 1);
            }

            return null;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            restaurants = await context.Restaurants
                .Where(r => r.Opened)
                .OrderBy(r => r.Departement)
                .ThenBy(r => r.Name)
                .Select(r => new RestaurantDisplay(r.Id, r.Name, r.AddressFull, r.Departement, r.Lat, r.Lng, r.CatalogueUpdate))
                .ToArrayAsync();

            await geoService.GetCurrentPositionAsync(this, "OnCurrentPositionChange");
        }
        catch
        {

        }
    }

    [JSInvokable]

    public void OnCurrentPositionChange(GeolocationPosition position)
    {
        geoPosition = new GeoCoordinate(position.Coords.Latitude, position.Coords.Longitude);
        var closestRestaurant = MissingRestaurants.OrderBy(r => new GeoCoordinate(r.Lat, r.Lng).GetDistanceTo(geoPosition)).FirstOrDefault();
        if (closestRestaurant != null)
        {
            newCodeRestaurant = closestRestaurant.Id;
            StateHasChanged();
        }
    }

    private async Task ResetDb()
    {
        try
        {
            Clear();

            await updateDataService.CheckAccessToken(accessToken);

            await context.Database.EnsureDeletedAsync();
            await context.Database.EnsureCreatedAsync();

            context.Updates.Add(new());
            await context.SaveChangesAsync();
            context.ChangeTracker.Clear();

            await ReloadRestaurants();
            await OnInitializedAsync();
            await ReloadCatalogue("K0157");
            await ReloadOffers();

            message = "Base reconstruite avec succès !";
        }
        catch (Exception e)
        {
            error = true;
            message = $"Une erreur est survenue lors de la reconstruction de la base : {e.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private async Task ReloadRestaurants()
    {
        Clear();
        (message, error) = await updateDataService.ReloadRestaurants();
        loading = false;
    }

    private async Task ReloadCatalogue(string? codeRestaurant)
    {
        if (!string.IsNullOrEmpty(codeRestaurant))
        {
            Clear();
            (message, error) = await updateDataService.ReloadCatalogue(codeRestaurant);
            loading = false;
        }
    }

    private async Task ReloadCatalogues()
    {
        Clear();
        foreach (var restaurant in LoadedRestaurants)
        {
            (message, error) = await updateDataService.ReloadCatalogue(restaurant.Id);
        }
        loading = false;
    }

    private async Task ReloadOffers()
    {
        if (!string.IsNullOrEmpty(accessToken))
        {
            Clear();
            (message, error) = await updateDataService.ReloadOffers(accessToken);
            loading = false;
        }
    }

    private void Clear()
    {
        message = null;
        error = false;
        loading = true;
    }
}
