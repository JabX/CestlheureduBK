// <auto-generated />
using System;
using CestlheureduBK.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CestlheureduBK.Migrations
{
    [DbContext(typeof(BKDbContext))]
    [Migration("20250831130721_MysteryInit")]
    partial class MysteryInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("CategorieDbMenuDb", b =>
                {
                    b.Property<string>("CategoriesId")
                        .HasColumnType("TEXT");

                    b.Property<string>("MenusId")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoriesId", "MenusId");

                    b.HasIndex("MenusId");

                    b.ToTable("CategorieDbMenuDb");
                });

            modelBuilder.Entity("CategorieDbProductDb", b =>
                {
                    b.Property<string>("CategoriesId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductsId")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoriesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("CategorieDbProductDb");
                });

            modelBuilder.Entity("CestlheureduBK.Model.CategorieDb", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("SubCategory")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("CestlheureduBK.Model.MenuDb", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AvailableInCatalogue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("CestlheureduBK.Model.MenuRestaurantDb", b =>
                {
                    b.Property<string>("MenuId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RestaurantId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<double?>("PriceL")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<double?>("PriceXL")
                        .HasColumnType("decimal(4, 2)");

                    b.HasKey("MenuId", "RestaurantId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("MenusRestaurants");
                });

            modelBuilder.Entity("CestlheureduBK.Model.MysteryCampaignDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Kind")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Month")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("MysteryCampaigns");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Kind = 0,
                            Month = "2024-09",
                            Price = 2.8999999999999999
                        },
                        new
                        {
                            Id = 2,
                            Kind = 1,
                            Month = "2024-09",
                            Price = 2.8999999999999999
                        },
                        new
                        {
                            Id = 3,
                            Kind = 0,
                            Month = "2025-03",
                            Price = 2.8999999999999999
                        },
                        new
                        {
                            Id = 4,
                            Kind = 1,
                            Month = "2025-03",
                            Price = 2.8999999999999999
                        });
                });

            modelBuilder.Entity("CestlheureduBK.Model.MysteryProductDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CampaignId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Chance")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<string>("ProductId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("ProductId");

                    b.ToTable("MysteryProducts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CampaignId = 1,
                            Chance = 0.14000000000000001,
                            ProductId = "702"
                        },
                        new
                        {
                            Id = 2,
                            CampaignId = 1,
                            Chance = 0.12,
                            ProductId = "2"
                        },
                        new
                        {
                            Id = 3,
                            CampaignId = 1,
                            Chance = 0.12,
                            ProductId = "49"
                        },
                        new
                        {
                            Id = 4,
                            CampaignId = 1,
                            Chance = 0.11,
                            ProductId = "1101"
                        },
                        new
                        {
                            Id = 5,
                            CampaignId = 1,
                            Chance = 0.10000000000000001,
                            ProductId = "463"
                        },
                        new
                        {
                            Id = 6,
                            CampaignId = 1,
                            Chance = 0.10000000000000001,
                            ProductId = "46"
                        },
                        new
                        {
                            Id = 7,
                            CampaignId = 1,
                            Chance = 0.070000000000000007,
                            ProductId = "953"
                        },
                        new
                        {
                            Id = 8,
                            CampaignId = 1,
                            Chance = 0.070000000000000007,
                            ProductId = "802"
                        },
                        new
                        {
                            Id = 9,
                            CampaignId = 1,
                            Chance = 0.050000000000000003,
                            ProductId = "1055"
                        },
                        new
                        {
                            Id = 10,
                            CampaignId = 1,
                            Chance = 0.050000000000000003,
                            ProductId = "1054"
                        },
                        new
                        {
                            Id = 11,
                            CampaignId = 1,
                            Chance = 0.040000000000000001,
                            ProductId = "17"
                        },
                        new
                        {
                            Id = 12,
                            CampaignId = 1,
                            Chance = 0.029999999999999999,
                            ProductId = "15"
                        },
                        new
                        {
                            Id = 13,
                            CampaignId = 2,
                            Chance = 0.26000000000000001,
                            ProductId = "664"
                        },
                        new
                        {
                            Id = 14,
                            CampaignId = 2,
                            Chance = 0.26000000000000001,
                            ProductId = "544"
                        },
                        new
                        {
                            Id = 15,
                            CampaignId = 2,
                            Chance = 0.23999999999999999,
                            ProductId = "666"
                        },
                        new
                        {
                            Id = 16,
                            CampaignId = 2,
                            Chance = 0.23999999999999999,
                            ProductId = "801"
                        },
                        new
                        {
                            Id = 17,
                            CampaignId = 3,
                            Chance = 0.16,
                            ProductId = "2"
                        },
                        new
                        {
                            Id = 18,
                            CampaignId = 3,
                            Chance = 0.16,
                            ProductId = "1101"
                        },
                        new
                        {
                            Id = 19,
                            CampaignId = 3,
                            Chance = 0.14000000000000001,
                            ProductId = "702"
                        },
                        new
                        {
                            Id = 20,
                            CampaignId = 3,
                            Chance = 0.12,
                            ProductId = "49"
                        },
                        new
                        {
                            Id = 21,
                            CampaignId = 3,
                            Chance = 0.11,
                            ProductId = "46"
                        },
                        new
                        {
                            Id = 22,
                            CampaignId = 3,
                            Chance = 0.11,
                            ProductId = "802"
                        },
                        new
                        {
                            Id = 23,
                            CampaignId = 3,
                            Chance = 0.050000000000000003,
                            ProductId = "1110"
                        },
                        new
                        {
                            Id = 24,
                            CampaignId = 3,
                            Chance = 0.040000000000000001,
                            ProductId = "1055"
                        },
                        new
                        {
                            Id = 25,
                            CampaignId = 3,
                            Chance = 0.029999999999999999,
                            ProductId = "1054"
                        },
                        new
                        {
                            Id = 26,
                            CampaignId = 3,
                            Chance = 0.029999999999999999,
                            ProductId = "213"
                        },
                        new
                        {
                            Id = 27,
                            CampaignId = 3,
                            Chance = 0.029999999999999999,
                            ProductId = "17"
                        },
                        new
                        {
                            Id = 28,
                            CampaignId = 3,
                            Chance = 0.02,
                            ProductId = "15"
                        },
                        new
                        {
                            Id = 29,
                            CampaignId = 4,
                            Chance = 0.35999999999999999,
                            ProductId = "664"
                        },
                        new
                        {
                            Id = 30,
                            CampaignId = 4,
                            Chance = 0.32000000000000001,
                            ProductId = "666"
                        },
                        new
                        {
                            Id = 31,
                            CampaignId = 4,
                            Chance = 0.32000000000000001,
                            ProductId = "801"
                        });
                });

            modelBuilder.Entity("CestlheureduBK.Model.MysteryRollDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RestaurantId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RollTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("MysteryRolls");
                });

            modelBuilder.Entity("CestlheureduBK.Model.OfferDb", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PromotionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PromotionId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("CestlheureduBK.Model.ProductDb", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AvailableInCatalogue")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Energy")
                        .HasColumnType("decimal(7, 2)");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = "2",
                            AvailableInCatalogue = false,
                            Name = "Big King"
                        },
                        new
                        {
                            Id = "15",
                            AvailableInCatalogue = false,
                            Name = "Double Cheese Bacon XXL"
                        },
                        new
                        {
                            Id = "17",
                            AvailableInCatalogue = false,
                            Name = "Double Whopper Cheese"
                        },
                        new
                        {
                            Id = "46",
                            AvailableInCatalogue = false,
                            Name = "Steakhouse"
                        },
                        new
                        {
                            Id = "49",
                            AvailableInCatalogue = false,
                            Name = "Whopper"
                        },
                        new
                        {
                            Id = "213",
                            AvailableInCatalogue = false,
                            Name = "Big Fish"
                        },
                        new
                        {
                            Id = "463",
                            AvailableInCatalogue = false,
                            Name = "Wrap Chicken Louisiane"
                        },
                        new
                        {
                            Id = "544",
                            AvailableInCatalogue = false,
                            Name = "Wrap Crousty Chèvre"
                        },
                        new
                        {
                            Id = "664",
                            AvailableInCatalogue = false,
                            Name = "Veggie Whopper"
                        },
                        new
                        {
                            Id = "666",
                            AvailableInCatalogue = false,
                            Name = "Veggie Steakhouse"
                        },
                        new
                        {
                            Id = "702",
                            AvailableInCatalogue = false,
                            Name = "Crispy Chicken Cheese"
                        },
                        new
                        {
                            Id = "801",
                            AvailableInCatalogue = false,
                            Name = "Veggie Chicken Louisiane Steakhouse"
                        },
                        new
                        {
                            Id = "802",
                            AvailableInCatalogue = false,
                            Name = "Chicken Louisiane Steakhouse"
                        },
                        new
                        {
                            Id = "953",
                            AvailableInCatalogue = false,
                            Name = "Chicken Spicy"
                        },
                        new
                        {
                            Id = "1054",
                            AvailableInCatalogue = false,
                            Name = "Master Cantal Bacon"
                        },
                        new
                        {
                            Id = "1055",
                            AvailableInCatalogue = false,
                            Name = "Master Poulet Cantal"
                        },
                        new
                        {
                            Id = "1101",
                            AvailableInCatalogue = false,
                            Name = "Double Cheese Bacon"
                        },
                        new
                        {
                            Id = "1110",
                            AvailableInCatalogue = false,
                            Name = "Double King"
                        });
                });

            modelBuilder.Entity("CestlheureduBK.Model.ProductRestaurantDb", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RestaurantId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("decimal(4, 2)");

                    b.HasKey("ProductId", "RestaurantId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("ProductsRestaurants");
                });

            modelBuilder.Entity("CestlheureduBK.Model.PromotionDb", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("CestlheureduBK.Model.PromotionRestaurantDb", b =>
                {
                    b.Property<string>("PromotionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RestaurantId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.HasKey("PromotionId", "RestaurantId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("PromotionsRestaurants");
                });

            modelBuilder.Entity("CestlheureduBK.Model.RestaurantDb", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AddressFull")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CatalogueUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Departement")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Lat")
                        .HasColumnType("REAL");

                    b.Property<double>("Lng")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Opened")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("CestlheureduBK.Model.SnackAmountDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MenuDbId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductDbId")
                        .HasColumnType("TEXT");

                    b.Property<int>("SnackId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MenuDbId");

                    b.HasIndex("ProductDbId");

                    b.HasIndex("SnackId");

                    b.ToTable("SnackAmounts");
                });

            modelBuilder.Entity("CestlheureduBK.Model.SnackDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Snacks");
                });

            modelBuilder.Entity("CestlheureduBK.Model.StepDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DefaultProductId")
                        .HasColumnType("TEXT");

                    b.Property<string>("MenuDbId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DefaultProductId");

                    b.HasIndex("MenuDbId");

                    b.ToTable("Steps");
                });

            modelBuilder.Entity("CestlheureduBK.Model.UpdateDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Offers")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Restaurants")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Update");
                });

            modelBuilder.Entity("CestlheureduBK.Model.UserDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FavoriteRestaurantId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FavoriteRestaurantId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MenuDbPromotionDb", b =>
                {
                    b.Property<string>("MenusId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PromotionsId")
                        .HasColumnType("TEXT");

                    b.HasKey("MenusId", "PromotionsId");

                    b.HasIndex("PromotionsId");

                    b.ToTable("MenuDbPromotionDb");
                });

            modelBuilder.Entity("ProductDbPromotionDb", b =>
                {
                    b.Property<string>("ProductsId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PromotionsId")
                        .HasColumnType("TEXT");

                    b.HasKey("ProductsId", "PromotionsId");

                    b.HasIndex("PromotionsId");

                    b.ToTable("ProductDbPromotionDb");
                });

            modelBuilder.Entity("StepProducts", b =>
                {
                    b.Property<string>("ProductsId")
                        .HasColumnType("TEXT");

                    b.Property<int>("StepDbId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductsId", "StepDbId");

                    b.HasIndex("StepDbId");

                    b.ToTable("StepProducts");
                });

            modelBuilder.Entity("StepProductsL", b =>
                {
                    b.Property<string>("ProductsLId")
                        .HasColumnType("TEXT");

                    b.Property<int>("StepDb1Id")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductsLId", "StepDb1Id");

                    b.HasIndex("StepDb1Id");

                    b.ToTable("StepProductsL");
                });

            modelBuilder.Entity("StepProductsXL", b =>
                {
                    b.Property<string>("ProductsXLId")
                        .HasColumnType("TEXT");

                    b.Property<int>("StepDb2Id")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductsXLId", "StepDb2Id");

                    b.HasIndex("StepDb2Id");

                    b.ToTable("StepProductsXL");
                });

            modelBuilder.Entity("CategorieDbMenuDb", b =>
                {
                    b.HasOne("CestlheureduBK.Model.CategorieDb", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CestlheureduBK.Model.MenuDb", null)
                        .WithMany()
                        .HasForeignKey("MenusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CategorieDbProductDb", b =>
                {
                    b.HasOne("CestlheureduBK.Model.CategorieDb", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CestlheureduBK.Model.ProductDb", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CestlheureduBK.Model.MenuRestaurantDb", b =>
                {
                    b.HasOne("CestlheureduBK.Model.MenuDb", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CestlheureduBK.Model.RestaurantDb", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("CestlheureduBK.Model.MysteryProductDb", b =>
                {
                    b.HasOne("CestlheureduBK.Model.MysteryCampaignDb", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CestlheureduBK.Model.ProductDb", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Campaign");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CestlheureduBK.Model.MysteryRollDb", b =>
                {
                    b.HasOne("CestlheureduBK.Model.MysteryProductDb", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CestlheureduBK.Model.RestaurantDb", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId");

                    b.HasOne("CestlheureduBK.Model.UserDb", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CestlheureduBK.Model.OfferDb", b =>
                {
                    b.HasOne("CestlheureduBK.Model.PromotionDb", "Promotion")
                        .WithMany()
                        .HasForeignKey("PromotionId");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("CestlheureduBK.Model.ProductRestaurantDb", b =>
                {
                    b.HasOne("CestlheureduBK.Model.ProductDb", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CestlheureduBK.Model.RestaurantDb", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("CestlheureduBK.Model.PromotionRestaurantDb", b =>
                {
                    b.HasOne("CestlheureduBK.Model.PromotionDb", "Promotion")
                        .WithMany()
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CestlheureduBK.Model.RestaurantDb", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Promotion");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("CestlheureduBK.Model.SnackAmountDb", b =>
                {
                    b.HasOne("CestlheureduBK.Model.MenuDb", null)
                        .WithMany("Snacks")
                        .HasForeignKey("MenuDbId");

                    b.HasOne("CestlheureduBK.Model.ProductDb", null)
                        .WithMany("Snacks")
                        .HasForeignKey("ProductDbId");

                    b.HasOne("CestlheureduBK.Model.SnackDb", "Snack")
                        .WithMany()
                        .HasForeignKey("SnackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Snack");
                });

            modelBuilder.Entity("CestlheureduBK.Model.StepDb", b =>
                {
                    b.HasOne("CestlheureduBK.Model.ProductDb", "DefaultProduct")
                        .WithMany()
                        .HasForeignKey("DefaultProductId");

                    b.HasOne("CestlheureduBK.Model.MenuDb", null)
                        .WithMany("Steps")
                        .HasForeignKey("MenuDbId");

                    b.Navigation("DefaultProduct");
                });

            modelBuilder.Entity("CestlheureduBK.Model.UserDb", b =>
                {
                    b.HasOne("CestlheureduBK.Model.RestaurantDb", "FavoriteRestaurant")
                        .WithMany()
                        .HasForeignKey("FavoriteRestaurantId");

                    b.Navigation("FavoriteRestaurant");
                });

            modelBuilder.Entity("MenuDbPromotionDb", b =>
                {
                    b.HasOne("CestlheureduBK.Model.MenuDb", null)
                        .WithMany()
                        .HasForeignKey("MenusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CestlheureduBK.Model.PromotionDb", null)
                        .WithMany()
                        .HasForeignKey("PromotionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductDbPromotionDb", b =>
                {
                    b.HasOne("CestlheureduBK.Model.ProductDb", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CestlheureduBK.Model.PromotionDb", null)
                        .WithMany()
                        .HasForeignKey("PromotionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StepProducts", b =>
                {
                    b.HasOne("CestlheureduBK.Model.ProductDb", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CestlheureduBK.Model.StepDb", null)
                        .WithMany()
                        .HasForeignKey("StepDbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StepProductsL", b =>
                {
                    b.HasOne("CestlheureduBK.Model.ProductDb", null)
                        .WithMany()
                        .HasForeignKey("ProductsLId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CestlheureduBK.Model.StepDb", null)
                        .WithMany()
                        .HasForeignKey("StepDb1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StepProductsXL", b =>
                {
                    b.HasOne("CestlheureduBK.Model.ProductDb", null)
                        .WithMany()
                        .HasForeignKey("ProductsXLId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CestlheureduBK.Model.StepDb", null)
                        .WithMany()
                        .HasForeignKey("StepDb2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CestlheureduBK.Model.MenuDb", b =>
                {
                    b.Navigation("Snacks");

                    b.Navigation("Steps");
                });

            modelBuilder.Entity("CestlheureduBK.Model.ProductDb", b =>
                {
                    b.Navigation("Snacks");
                });
#pragma warning restore 612, 618
        }
    }
}
