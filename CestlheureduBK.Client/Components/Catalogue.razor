@rendermode InteractiveWebAssembly

<RadzenPanel AllowCollapse="true" Collapsed="!filter" Expand="@(() => filter = true)" Collapse="@(() => filter = false)">
    <HeaderTemplate>
        @if (criteria != new CatalogueCriteria())
        {
            <RadzenButton Text="Réinitialiser" Variant="Variant.Outlined" Icon="replay" Click="@(() => criteria = new())" />
        }
        <span @onclick="@(()=> filter = !filter)">Filtres</span>      
    </HeaderTemplate>
    <ChildContent>
        <RadzenCard Variant="Variant.Flat">
            <RadzenStack>
                <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap" AlignItems="AlignItems.Center">
                    <RadzenLabel Text="Nom" Component="name" />
                    <RadzenTextBox Value="@criteria.Name" Name="name" @oninput="OnNameChange" />
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap" AlignItems="AlignItems.Center">
                    <RadzenLabel Text="Catégories" Component="categories" />
                    <RadzenCheckBoxList AllowSelectAll="true"
                                        SelectAllText="Toutes"
                                        Name="categories"
                                        Value=@(criteria.Categories ?? allCategories)
                                        TValue="CategorieDisplay"
                                        Change="OnCategorieChange">
                        <Items>
                            @foreach (var categorie in allCategories)
                            {
                                <RadzenCheckBoxListItem Text="@categorie.Name" Value="categorie" />
                            }
                        </Items>
                    </RadzenCheckBoxList>
                </RadzenStack>
            </RadzenStack>
        </RadzenCard>
    </ChildContent>
</RadzenPanel>
<br />

<RadzenText Text="@($"{Products.Length} produits")" TextStyle="TextStyle.DisplayH6" />

<RadzenDataGrid Data="Products">
    <Columns>
        <RadzenDataGridColumn>
            <HeaderTemplate>
                <span class="header" @onclick="@(() => ToggleSort("name"))">
                    <span>Produit</span>
                    @if (criteria.SortBy == "name")
                    {
                        <RadzenIcon Icon="@(criteria.Asc ? "arrow_drop_up" : "arrow_drop_down")" />
                    }
                </span>
            </HeaderTemplate>
            <Template Context="data">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
                    <img class="image" src="@data.Image" />
                    <RadzenStack Gap="0">
                        <span>@(data.Type == ItemType.Menu ? "Menu " : "")@data.Name</span>
                        <RadzenStack Orientation="Orientation.Horizontal" Style="font-size:0.8em;column-gap:6px" Wrap="FlexWrap.Wrap">
                            @foreach (var categorie in data.Categories ?? [])
                            {
                                <span style="@(categorie.SubCategory ? "font-style:italic" : "font-weight:600")">@categorie.Name</span>
                            }
                        </RadzenStack>
                    </RadzenStack>
                </RadzenStack>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn HeaderCssClass="col-3">
            <HeaderTemplate>
                <span class="header" @onclick="@(() => ToggleSort("energy"))">
                    <span>Calories</span>
                    @if (criteria.SortBy == "energy")
                    {
                        <RadzenIcon Icon="@(criteria.Asc ? "arrow_drop_up" : "arrow_drop_down")" />
                    }
                </span>
            </HeaderTemplate>
            <Template Context="data">
                 <RadzenStack AlignItems="AlignItems.Start" Gap="2">
                    <a data-loading="@loading" class="energy" @onclick="() => ReloadEnergy(data)" title="Clique pour vérifier que la valeur est correcte">@(data.Energy.ToString("0 kcal"))</a>

                    @if (data.Snacks.Any() && data.Type == ItemType.Product)
                    {
                        <span class="detail">(@((data.Energy / data.Snacks.Sum(s => s.Amount)).ToString("0 kcal")) / @(string.Join("", data.Snacks.First().Name.Split(' ').Select(e => e.ToLower()[0]))))</span>
                    }
                </RadzenStack>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn HeaderCssClass="col-2">
            <HeaderTemplate>
                <span class="header" @onclick="@(() => ToggleSort("price"))">
                    <span>Prix</span>
                    @if (criteria.SortBy == "price")
                    {
                        <RadzenIcon Icon="@(criteria.Asc ? "arrow_drop_up" : "arrow_drop_down")" />
                    }
                </span>
            </HeaderTemplate>
            <Template Context="data">
                <RadzenStack AlignItems="AlignItems.Start" Gap="0">
                    <span>@data.Price.ToString("0.00 €")</span>
                    @if (data.Snacks.Any() && data.Type == ItemType.Product)
                    {
                        <span class="detail">(@(double.Round((data.Price / data.Snacks.Sum(s => s.Amount)), 2)) / @(string.Join("", data.Snacks.First().Name.Split(' ').Select(e => e.ToLower()[0]))))</span>
                    }
                </RadzenStack>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn HeaderCssClass="col-3">
            <HeaderTemplate>
                <span class="header" @onclick="@(() => ToggleSort("value"))">
                    <span>Valeur</span>
                    @if (criteria.SortBy == "value")
                    {
                        <RadzenIcon Icon="@(criteria.Asc ? "arrow_drop_up" : "arrow_drop_down")" />
                    }
                </span>
            </HeaderTemplate>
            <Template Context="data">
                @(data.EnergyValue.ToString("0.0 kcal"))
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    readonly HttpClient? _client;
    private bool loading;

    public Catalogue(HttpClient? client = null)
    {
        _client = client;
    }

    [Parameter]
    public required CatalogueDisplay[] Data { get; set; }

    private CatalogueCriteria criteria = new();

    private bool filter;

    private List<CategorieDisplay> allCategories = [];

    private CatalogueDisplay[] Products
    {
        get
        {
            var query = Data.AsEnumerable();

            if (!string.IsNullOrEmpty(criteria.Name))
            {
                query = query.Where(off => off.Name.Contains(criteria.Name, StringComparison.CurrentCultureIgnoreCase));
            }

            var catFilter = criteria.Categories?.Select(c => c.Id).ToList();
            if (catFilter != null)
            {
                query = query.Where(m => m.Categories.Any(c => catFilter.Contains(c.Id)));
            }

            return ((criteria.SortBy, criteria.Asc) switch
            {
                ("name", false) => query.OrderByDescending(off => off.Name).ThenByDescending(off => off.Type),
                ("name", true) => query.OrderBy(off => off.Name).ThenByDescending(off => off.Type),
                ("energy", false) => query.OrderByDescending(off => off.Energy).ThenBy(off => off.Price),
                ("energy", true) => query.OrderBy(off => off.Energy).ThenBy(off => off.Price),
                ("price", false) => query.OrderByDescending(off => off.Price).ThenByDescending(off => off.Energy),
                ("price", true) => query.OrderBy(off => off.Price).ThenBy(off => off.Energy),
                ("value", false) => query.OrderByDescending(off => off.EnergyValue).ThenBy(off => off.Price),
                ("value", true) => query.OrderBy(off => off.EnergyValue).ThenBy(off => off.Price),
                _ => throw new InvalidOperationException()
            })
                .ToArray();
        }
    }

    protected override void OnInitialized()
    {
        allCategories = Data.SelectMany(o => o.Categories).DistinctBy(a => a.Id).Where(a => !a.SubCategory).OrderBy(a => a.Name).ToList();
    }

    private void ToggleSort(string field)
    {
        if (field != criteria.SortBy)
        {
            criteria.Asc = field != "value";
        }
        else
        {
            criteria.Asc = !criteria.Asc;
        }

        criteria.SortBy = field;
    }

    private void OnNameChange(ChangeEventArgs args)
    {
        criteria.Name = args.Value != null ? (string)args.Value : "";
    }

    private void OnCategorieChange(IEnumerable<CategorieDisplay>? categories)
    {
        criteria.Categories = categories?.Count() == allCategories.Count ? null : (categories ?? []).ToList();
    }


    private async Task ReloadEnergy(CatalogueDisplay item)
    {
        if (_client != null)
        {
            loading = true;
            var response = await _client.PutAsync($"api/energy/{item.Type}/{item.Id}", null);
            loading = false;

            var updates =  await response.Content.ReadFromJsonAsync<IEnumerable<CatalogueEnergyUpdate>>() ?? [];            
            foreach (var update in updates)
            {
                var matching = Data.SingleOrDefault(d => (d.Type == update.Type || d.Type == ItemType.ProductAsMenu && update.Type == ItemType.Menu) && d.Id == update.Id);
                if (matching != null)
                {
                    Data[Array.IndexOf(Data, matching)] = matching with { Energy = update.Energy };
                }
            }

            StateHasChanged();
        }
    }

    private record CatalogueCriteria
    {
        public string SortBy { get; set; } = "value";

        public bool Asc { get; set; }

        public string Name { get; set; } = "";

        public List<CategorieDisplay>? Categories { get; set; }
    }
}