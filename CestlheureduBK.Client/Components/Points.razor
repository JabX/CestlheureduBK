@inject IDataService dataService
@rendermode InteractiveWebAssembly

<h1>Rentabilité des couronnes</h1>

<p>
    Restaurant : <strong>@Restaurant.Name</strong> (@Restaurant.Departement)<br />
    <span class="detail">Dernières mises à jour : catalogue le @ToLocalTime(Update.Catalogue) et offres le @ToLocalTime(Update.Offers)</span>
</p>

<RadzenPanel Text="Filtres" AllowCollapse="true" Collapsed="!filter" Expand="@(() => filter = true)" Collapse="@(() => filter = false)">
    <RadzenCard Variant="Variant.Flat">
        <RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap" AlignItems="AlignItems.Center">
                <RadzenLabel Text="Nom" Component="name" />
                <RadzenTextBox Value="@criteria.Name" Name="name" @oninput="OnNameChange" />
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap" AlignItems="AlignItems.Center">
                <RadzenLabel Text="Couronnes" Component="couronnes" />
                <RadzenCheckBoxList AllowSelectAll="true"
                                    SelectAllText="Tous"
                                    Name="couronnes"
                                    Value=@(criteria.Points ?? allPoints)
                                    TValue="int"
                                    Change="OnPointsChange">
                    <Items>
                        @foreach (var point in allPoints)
                        {
                            <RadzenCheckBoxListItem Text="@point.ToString()" Value="point" />
                        }
                    </Items>
                </RadzenCheckBoxList>
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap" AlignItems="AlignItems.Center">
                <RadzenLabel Text="Catégories" Component="categories" />
                <RadzenCheckBoxList AllowSelectAll="true"
                                    SelectAllText="Toutes"
                                    Name="categories"
                                    Value=@(criteria.Categories ?? allCategories)
                                    TValue="CategorieDisplay"
                                    Change="OnCategorieChange">
                    <Items>
                        @foreach (var categorie in allCategories)
                        {
                            <RadzenCheckBoxListItem Text="@categorie.Name" Value="categorie" />
                        }
                    </Items>
                </RadzenCheckBoxList>
            </RadzenStack>
        </RadzenStack>
    </RadzenCard>
</RadzenPanel>
<br />

<RadzenText Text="@($"{Data.Length} offres")" TextStyle="TextStyle.DisplayH6" />

<RadzenDataGrid Data="@Data" IsLoading="loading">
    <Columns>
        <RadzenDataGridColumn>
            <HeaderTemplate>
                <span class="header" @onclick="@(() => ToggleSort("product"))">
                    <span>Produit</span>
                    @if (criteria.SortBy == "product")
                    {
                        <RadzenIcon Icon="@(criteria.Asc ? "arrow_drop_up" : "arrow_drop_down")" />
                    }
                </span>
            </HeaderTemplate>
            <Template Context="data">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
                    <img class="image" src="@data.Image" />
                    <RadzenStack Gap="0">
                        <span>@(data.Type == "Menu" ? "Menu " : "")@data.Name</span>
                        <RadzenStack Orientation="Orientation.Horizontal" Style="font-size:0.8em;column-gap:6px" Wrap="FlexWrap.Wrap">
                            @foreach (var categorie in data.Categories ?? [])
                            {
                                <span style="@(categorie.SubCategory ? "font-style:italic" : "font-weight:600")">@categorie.Name</span>
                            }
                        </RadzenStack>
                    </RadzenStack>
                </RadzenStack>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="Amount" Width="85px">
            <HeaderTemplate>
                <span class="header" @onclick="@(() => ToggleSort("price"))">
                    <span>Prix €</span>
                    @if (criteria.SortBy == "price")
                    {
                        <RadzenIcon Icon="@(criteria.Asc ? "arrow_drop_up" : "arrow_drop_down")" />
                    }
                </span>
            </HeaderTemplate>
            <Template Context="data">
                <RadzenStack AlignItems="AlignItems.Start" Gap="0">
                    <span>@data.Price.ToString("0.00 €")</span>
                    @if (data.Snacks.Any())
                    {
                        <span class="detail">(@((data.Price / data.Snacks.Sum(s => s.Amount)).ToString("0.00 €")) / @(string.Join("", data.Snacks.First().Name.Split(' ').Select(e => e.ToLower()[0]))))</span>
                    }
                </RadzenStack>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Width="85px">
            <HeaderTemplate>
                <span class="header" @onclick="@(() => ToggleSort("points"))">
                    <span>Prix 👑</span>
                    @if (criteria.SortBy == "points")
                    {
                        <RadzenIcon Icon="@(criteria.Asc ? "arrow_drop_up" : "arrow_drop_down")" />
                    }
                </span>
            </HeaderTemplate>
            <Template Context="data">
                <RadzenStack AlignItems="AlignItems.Start" Gap="0">
                    <span>@data.Price.ToString("0.00 €")</span>
                    @if (data.Snacks.Any())
                    {
                        <span class="detail">(@((data.Price / data.Snacks.Sum(s => s.Amount)).ToString("0.00 €")) / @(string.Join("", data.Snacks.First().Name.Split(' ').Select(e => e.ToLower()[0]))))</span>
                    }
                </RadzenStack>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Width="115px">
            <HeaderTemplate>
                <span class="header" @onclick="@(() => ToggleSort("value"))">
                    <span>Valeur 👑</span>
                    @if (criteria.SortBy == "value")
                    {
                        <RadzenIcon Icon="@(criteria.Asc ? "arrow_drop_up" : "arrow_drop_down")" />
                    }
                </span>
            </HeaderTemplate>
            <Template Context="data">
                @data.Value.ToString("0.000 €")
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    [Parameter]
    public required OfferDisplay[] Data { get; set; }
    [Parameter]
    public required RestaurantDisplay Restaurant { get; set; }
    [Parameter]
    public required UpdateDisplay Update { get; set; }

    private OfferCriteria criteria = new();

    private bool filter;
    private bool loading;

    private Debouncer debouncer = new();

    private List<int> allPoints = [];
    private List<CategorieDisplay> allCategories = [];

    protected override void OnInitialized()
    {
        allPoints = Data.Select(o => o.Points).Distinct().OrderBy(a => a).ToList();
        allCategories = Data.SelectMany(o => o.Categories).DistinctBy(a => a.Id).Where(a => !a.SubCategory).OrderBy(a => a.Name).ToList();
    }

    private async Task ToggleSort(string field)
    {
        if (field != criteria.SortBy)
        {
            criteria.Asc = field != "value";
        }
        else
        {
            criteria.Asc = !criteria.Asc;
        }

        criteria.SortBy = field;
        await LoadOffers();
    }

    private async Task OnNameChange(ChangeEventArgs args)
    {
        criteria.Name = args.Value != null ? (string)args.Value : "";
        await debouncer.DebounceAsync(300, (ct) => LoadOffers());
    }

    private async Task OnPointsChange(IEnumerable<int>? points)
    {
        criteria.Points = points?.Count() == allPoints.Count ? null : (points ?? []).ToList();
        await LoadOffers();
    }

    private async Task OnCategorieChange(IEnumerable<CategorieDisplay>? categories)
    {
        criteria.Categories = categories?.Count() == allCategories.Count ? null : (categories ?? []).ToList();
        await LoadOffers();
    }

    private async Task LoadOffers()
    {
        try
        {
            loading = true;
            Data = await dataService.GetOffers(criteria);
        }
        finally
        {
            loading = false;
        }
    }

    private string ToLocalTime(DateTime? date)
    {
        if (date == null)
        {
            return string.Empty;
        }

        return TimeZoneInfo.ConvertTimeFromUtc(date.Value, TimeZoneInfo.FindSystemTimeZoneById("Europe/Paris"))
            .ToString("dd/MM/yyyy à HH:mm");
    }
}
