@rendermode InteractiveWebAssembly

@inject NavigationManager navigationManager;

<RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap" AlignItems="AlignItems.Start">
    <RadzenLabel Text="Mois" Component="month" Style="line-height:40px" />
    <RadzenDropDown Value=@Month
                    Data=@Months
                    Name="month"
                    Style="width:350px"
                    Change="OnMonthChange">
        <Template>
            @DateTime.Parse(@context).ToString("MMMM yyyy")
        </Template>
        <ValueTemplate>
            @DateTime.Parse(@context).ToString("MMMM yyyy")
        </ValueTemplate>
    </RadzenDropDown>
</RadzenStack>

@if (Data.Count == 0)
{
    <p>Pas de Burger Mystère ce mois-ci 🥺</p>
}
else if (MainData.SelectMany(s => s.Burgers).Any())
{
    @foreach (var snack in MainData)
    {
        <br />
        <RadzenText Text="@snack.Name" TextStyle="TextStyle.DisplayH6" />
        <span style="font-size:0.9em;font-style:italic">Prix : @snack.Price.ToString("0.00 €") / Espérance : @snack.PriceExpectancy.ToString("0.00 €") et @snack.EnergyExpectancy.ToString("0 kcal")</span>
        <br />
        <br />

        <RadzenDataGrid Data="@snack.Burgers">
            <Columns>
                <RadzenDataGridColumn Title="Produit">
                    <Template Context="data">
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
                            <img src="@data.Image" class="image" />
                            <span>@data.Name</span>
                        </RadzenStack>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn HeaderCssClass="col-1">
                    <HeaderTemplate>
                        <span class="header" @onclick="@(() => ToggleSort("chance"))">
                            <span>%</span>
                            @if (sortBy == "chance")
                            {
                                <RadzenIcon Icon="@(asc ? "arrow_drop_up" : "arrow_drop_down")" />
                            }
                        </span>
                    </HeaderTemplate>
                    <Template Context="data">
                        <RadzenStack AlignItems="AlignItems.Start" Gap="0">
                            <span>@data.Chance.ToString("0 %")</span>
                        </RadzenStack>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn HeaderCssClass="col-2">
                    <HeaderTemplate>
                        <span class="header" @onclick="@(() => ToggleSort("price"))">
                            <span>Prix</span>
                            @if (sortBy == "price")
                            {
                                <RadzenIcon Icon="@(asc ? "arrow_drop_up" : "arrow_drop_down")" />
                            }
                        </span>
                    </HeaderTemplate>
                    <Template Context="data">
                        <RadzenStack AlignItems="AlignItems.Start" Gap="0">
                            <span>@(data.Price?.ToString("0.00 €") ?? "-")</span>
                            <span class="detail">(x @(data.Value?.ToString("0.00") ?? "-"))</span>
                        </RadzenStack>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn HeaderCssClass="col-4">
                    <HeaderTemplate>
                        <span class="header" @onclick="@(() => ToggleSort("energy"))">
                            <span>Calories</span>
                            @if (sortBy == "energy")
                            {
                                <RadzenIcon Icon="@(asc ? "arrow_drop_up" : "arrow_drop_down")" />
                            }
                        </span>
                    </HeaderTemplate>
                    <Template Context="data">
                        <RadzenStack AlignItems="AlignItems.Start" Gap="0">
                            <span>@(data.Energy?.ToString("0 kcal") ?? "-")</span>
                        </RadzenStack>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
}

@code {
    [Parameter]
    public required IList<BurgerMystereListDisplay> Data { get; set; }

    [Parameter]
    public required string Month { get; set; }

    [Parameter]
    public required IList<string> Months { get; set; }

    private string sortBy = "chance";
    private bool asc = false;

    private IList<BurgerMystereListDisplay> MainData
    {
        get
        {
            return Data.Select(d => d with
            {
                Burgers = ((sortBy, asc) switch
                {
                    ("name", false) => d.Burgers.OrderByDescending(off => off.Name).ThenByDescending(off => off.Price),
                    ("name", true) => d.Burgers.OrderBy(off => off.Name).ThenBy(off => off.Price),
                    ("chance", false) => d.Burgers.OrderByDescending(off => off.Chance).ThenByDescending(off => off.Price),
                    ("chance", true) => d.Burgers.OrderBy(off => off.Chance).ThenByDescending(off => off.Price),
                    ("energy", false) => d.Burgers.OrderByDescending(off => off.Energy).ThenByDescending(off => off.Price),
                    ("energy", true) => d.Burgers.OrderBy(off => off.Energy).ThenBy(off => off.Price),
                    ("price", false) => d.Burgers.OrderByDescending(off => off.Price).ThenBy(off => off.Energy),
                    ("price", true) => d.Burgers.OrderBy(off => off.Price).ThenBy(off => off.Energy),
                    _ => throw new InvalidOperationException()
                }).ToArray()
            }).ToArray();
        }
    }

    private void ToggleSort(string field)
    {
        asc = !asc;
        sortBy = field;
    }

    private void OnMonthChange(object change)
    {
        var month = (string)change;
        navigationManager.NavigateTo(navigationManager.Uri.Replace(Month, month));
    }
}
