@rendermode InteractiveWebAssembly

@using GeoCoordinate.NetStandard2;
@inject NavigationManager navigationManager;
@inject IGeolocationService geoService;

@if (Data?.Restaurant != null)
{
    <p>
        <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap" AlignItems="AlignItems.Start" Style="gap:0;column-gap:var(--rz-gap)">
            <RadzenLabel Text="Restaurant" Component="codeRestaurant" Style="line-height:40px" />
            <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.End">
                <RadzenDropDownDataGrid Value=@Data.Restaurant.Id
                                        Data=@Data.Restaurants
                                        Name="codeRestaurant"
                                        TextProperty="@nameof(RestaurantDisplay.FullName)"
                                        ValueProperty="@nameof(RestaurantDisplay.Id)"
                                        Style="width:350px"
                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        Change="OnRestaurantChange"
                                        Disabled=@loading>
                    <Columns>
                        <RadzenDropDownDataGridColumn Property="@nameof(RestaurantDisplay.Departement)" Title="Dept." Width="70px" />
                        <RadzenDropDownDataGridColumn Property="@nameof(RestaurantDisplay.Name)" Title="Nom" />
                    </Columns>
                </RadzenDropDownDataGrid>
                @if (Distance != null && !loading)
                {
                    <span class="distance">à @Distance km</span>
                }
                else if (geoLoading && !loading)
                {
                    <span class="distance">En attente de la position...</span>
                }
                else
                {
                    <span class="distance">-</span>
                }
            </RadzenStack>
            @if (loading)
            {
                <RadzenProgressBarCircular Mode="ProgressBarMode.Indeterminate" ShowValue="false" Style="height:40px" />
            }
            else
            {
                if (Data.IsAuthenticated)
                {
                    if (Data.FavoriteRestaurant?.Id == Data.Restaurant.Id)
                    {
                        <RadzenIcon Icon="Favorite" title="Ce restaurant est mon restaurant préféré !" Style="margin:6px 0;" />
                    }
                    else
                    {
                        <RadzenButton Icon="heart_plus" title="Enregistrer comme restaurant préféré" Click="SetFavoriteRestaurant" />
                    }
                }

                if (Data.Restaurant.Id == ClosestRestaurant?.Id)
                {
                    <RadzenIcon Icon="distance" title="Il s'agit du restaurant le plus proche de moi" Style="margin:6px 0;" />
                }
                else if (ClosestRestaurant != null)
                {
                    <RadzenButton Icon="location_searching" title="Choisir le restaurant le plus proche de moi" Click="@(() => OnRestaurantChange(ClosestRestaurant.Id))" />
                }

                if (Data.Restaurant?.CatalogueUpdate != null)
                {
                    <RadzenButton Icon="refresh" title="Mettre à jour le catalogue" Click="ReloadCatalogue" />
                }
            }
        </RadzenStack>
        @if (!loading)
        {
            if (Data.Restaurant?.CatalogueUpdate != null)
            {
                <span class="detail">Dernières mises à jour : catalogue le @ToLocalTime(Data.Restaurant.CatalogueUpdate) et offres le @ToLocalTime(Data.OffersUpdate)</span>

                if (Data.Restaurant.CatalogueUpdate.Value.AddDays(7) < DateTime.UtcNow)
                {
                    <br />
                    <br />
                    <span>🫸 Les données de ce restaurant n'ont pas été mises à jour depuis plus d'une semaine !</span>
                }
            }
            else
            {
                <br />
                <span>Les données pour ce restaurant n'ont pas été chargées... 🥺</span>
                <br />
                <br />
                <RadzenButton Icon="refresh" ButtonStyle="ButtonStyle.Primary" Text="Je m'en occupe !" Click="ReloadCatalogue" />
            }
        }
    </p>
}
else
{
    <p>Le restaurant demandé n'existe pas 🥺</p>
}

@code {
    readonly HttpClient? _client;

    public Header(HttpClient? client = null)
    {
        _client = client;
    }

    GeoCoordinate? geoPosition;
    bool loading;
    bool geoLoading = true;

    [Parameter]
    public HeaderDisplay? Data { get; set; }

    RestaurantDisplay? ClosestRestaurant => geoPosition != null ? Data?.Restaurants.OrderBy(r => new GeoCoordinate(r.Lat, r.Lng).GetDistanceTo(geoPosition)).FirstOrDefault() : null;

    double? Distance
    {
        get
        {
            var restaurant = Data?.Restaurants.SingleOrDefault(r => r.Id == Data.Restaurant?.Id);
            if (restaurant != null && geoPosition != null)
            {
                return double.Round(new GeoCoordinate(restaurant.Lat, restaurant.Lng).GetDistanceTo(geoPosition) / 1000, 1);
            }

            return null;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await geoService.GetCurrentPositionAsync(this, "OnCurrentPositionChange");
        }
    }

    [JSInvokable]

    public void OnCurrentPositionChange(GeolocationPosition position)
    {
        geoPosition = new GeoCoordinate(position.Coords.Latitude, position.Coords.Longitude);
        StateHasChanged();
        geoLoading = false;

        if (!(navigationManager.Uri.Split('/', StringSplitOptions.RemoveEmptyEntries).LastOrDefault()?.StartsWith("K") ?? false))
        {
            if (ClosestRestaurant != null)
            {
                OnRestaurantChange(ClosestRestaurant.Id);
            }
        }
    }

    private async Task ReloadCatalogue()
    {
        if (Data?.Restaurant != null && _client != null)
        {
            loading = true;
            var response = await _client.PutAsync($"api/update/{Data.Restaurant.Id}", null);
            loading = false;
            navigationManager.Refresh();
        }
    }

    private async Task SetFavoriteRestaurant()
    {
        if (Data?.Restaurant != null && _client != null)
        {
            loading = true;
            var response = await _client.PutAsync($"api/favorite/{Data.Restaurant.Id}", null);
            loading = false;
            navigationManager.Refresh();
        }
    }

    private void OnRestaurantChange(object change)
    {
        loading = true;
        var urlParts = navigationManager.Uri[navigationManager.BaseUri.Length..].Split('/', StringSplitOptions.RemoveEmptyEntries);
        var restaurantId = (string)change;

        var url = string.Empty;
        if (urlParts.Length == 0)
        {
            url += "points";
        }
        else if (urlParts[0] == "admin" || urlParts[0] == "login" || urlParts[0] == "me")
        {
            return;
        }

        if (urlParts.LastOrDefault()?.StartsWith("K") ?? false)
        {
            urlParts = urlParts.SkipLast(1).ToArray();
        }

        url += $"{string.Join("/", urlParts)}/{restaurantId}";

        navigationManager.NavigateTo(url);
    }

    private string ToLocalTime(DateTime? date)
    {
        if (date == null)
        {
            return string.Empty;
        }

        return TimeZoneInfo.ConvertTimeFromUtc(date.Value, TimeZoneInfo.FindSystemTimeZoneById("Europe/Paris"))
            .ToString("dd/MM/yyyy à HH:mm");
    }
}
